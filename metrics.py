# """
#     File name: metrics.py
#     Author: Patrick Cummings
#     Date created: 10/24/2019
#     Date last modified: 10/24/2019
#     Python Version: 3.7
#
#     Contains functions for training and evaluating perceptron model.
#     calc_predictions() to calculate predictions on test or validation sets.
#     calc_accuracy() to calculate accuracy of predictions generated by classifier.
# """
#
# import numpy as np
#
# from models.algorithms import poly_kernel
#
#
# def calc_predictions(x, weights):
#     """Calculates predicted values for perceptron classifier using given weights.
#
#     Args:
#         x (ndarray): (n x m) ndarray of n observations on m features.
#         weights (ndarray): (1 x m) ndarray of m weights from learned model.
#
#     Returns:
#         predictions (list of float): list of predicted values in {-1, 1}.
#     """
#     weights = np.array(weights, dtype=np.float64)
#     predictions = []
#     for i in range(np.size(x, axis=0)):
#         wtx = weights.T.dot(x[i])
#         if wtx >= 0:
#             pred = 1
#         else:
#             pred = -1
#         predictions.append(pred)
#     return predictions
#
#
# def calc_predictions_kernel(x_train, y_train, x_val, alphas, p):
#     """Calculates predicted values for perceptron classifier using given weights.
#
#     Args:
#         x_train (ndarray): (n x m) ndarray of n observations on m features from training set.
#         y_train (ndarray): (n x 1) ndarray of labels from training set.
#         x_val (ndarray): (k x m) ndarray of features from validation set.
#         alphas (ndarray): (1 x n) ndarray of n alphas from learned model.
#         p (int): degree of polynomial kernel.
#
#     Returns:
#         predictions (list of float): list of predicted values in {-1, 1}.
#     """
#     alphas = np.array(alphas, dtype=np.float64)
#     predictions = []
#     for i in range(np.size(x_val, axis=0)):
#         u = 0
#         for j in range(np.size(x_train, axis=0)):
#             u += alphas[j] * y_train[j] * poly_kernel(x_train[j], x_val[i], p)
#         if u >= 0:
#             pred = 1
#         else:
#             pred = -1
#         predictions.append(pred)
#     return predictions
#
#
# def calc_accuracy(predictions, labels):
#     """Calculate accuracy of perceptron classifier.
#
#     Args:
#         predictions (list or ndarray): list or ndarray of class predictions in {-1, 1}
#         labels (list or ndarray): list or ndarray of true labels.
#
#     Returns:
#         accuracy (float): calculated accuracy.
#     """
#     # Ensure lists are coerced to ndarrays of dtype=int.
#     predictions = np.array(predictions, dtype=int)
#     labels = np.array(labels, dtype=int)
#     correct = (labels == predictions)
#     accuracy = correct.sum() / np.size(correct)
#     return accuracy
